---
# create adot-col namespace
apiVersion: v1
kind: Namespace
metadata:
  name: adot-col3
  labels:
    name: adot-col3

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: adot-collector-conf
  namespace: adot-col3
  labels:
    app: aws-adot
    component: adot-collector-conf
data:
  adot-collector-config: |
    receivers:
      prometheus:
        config:
          global:
            scrape_interval: 1m
            scrape_timeout: 50s

          scrape_configs:
          - job_name: 'kubernetes-cadvisor'
            sample_limit: 10000
            scheme: https
            # metrics_path: /metrics/cadvisor
  
            kubernetes_sd_configs:
            - role: node
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
                # Only for Kubernetes ^1.7.3.
                # See: https://github.com/prometheus/prometheus/issues/2916
              - target_label: __address__
                # replacement: kubernetes.default.svc.cluster.local:443
                replacement: kubernetes.default.svc:443
              - source_labels: [__meta_kubernetes_node_name]
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor
            metric_relabel_configs:
              - action: replace
                source_labels: [id]
                regex: '^/machine\.slice/machine-rkt\\x2d([^\\]+)\\.+/([^/]+)\.service$'
                target_label: rkt_container_name
                replacement: '$${2}-$${1}'
              - action: replace
                source_labels: [id]
                regex: '^/system\.slice/(.+)\.service$'
                target_label: systemd_service_name
                replacement: '$${1}'
    processors:
      awscontainerinsightprocessor:
      filter/strict:
        metrics:
          include:
            match_type: strict
            metric_names:
              - container_spec_cpu_quota
              - container_spec_memory_limit_bytes
      filter:
        metrics:
          include:
            match_type: regexp
            metric_names:
              - new_container_.*
              - pod_.*
              - node_.*
      metricstransform/strict:
        transforms:
          - include: container_memory_working_set_bytes
            new_name: new_container_memory_working_set
            action: insert
            match_type: strict
            match_labels: {"container": "nginx-far-100"}
      metricstransform:
        transforms:
          - include: container_spec_cpu_quota
            new_name: new_container_cpu_limit
            action: insert
            match_type: regexp
            match_labels: {"container": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_spec_cpu_shares
            new_name: new_container_cpu_request
            action: insert
            match_type: regexp
            match_labels: {"container": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_spec_memory_limit_bytes
            new_name: new_container_memory_limit
            action: insert
            match_type: regexp
            match_labels: {"container": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_memory_cache
            new_name: new_container_memory_limit
            action: insert
            match_type: regexp
            match_labels: {"container": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_memory_max_usage_bytes
            new_name: new_container_memory_max_usage
            action: insert
            match_type: regexp
            match_labels: {"container": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_memory_usage_bytes
            new_name: new_container_memory_usage
            action: insert
            match_type: regexp
            match_labels: {"container": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_memory_working_set_bytes
            new_name: new_container_memory_working_set
            action: insert
            match_type: regexp
            match_labels: {"image": "^$", "container": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_spec_cpu_quota
            new_name: pod_cpu_limit
            action: insert
            match_type: regexp
            match_labels: {"image": "^$", "container": "^$", "pod": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_spec_cpu_shares
            new_name: pod_cpu_request
            action: insert
            match_type: regexp
            match_labels: {"image": "^$", "container": "^$", "pod": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_spec_memory_limit_bytes
            new_name: pod_memory_limit
            action: insert
            match_type: regexp
            match_labels: {"image": "^$", "container": "^$", "pod": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_memory_cache
            new_name: pod_memory_limit
            action: insert
            match_type: regexp
            match_labels: {"image": "^$", "container": "^$", "pod": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_memory_max_usage_bytes
            new_name: pod_memory_max_usage
            action: insert
            match_type: regexp
            match_labels: {"image": "^$", "container": "^$", "pod": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_memory_usage_bytes
            new_name: pod_memory_usage
            action: insert
            match_type: regexp
            match_labels: {"image": "^$", "container": "^$", "pod": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_memory_working_set_bytes
            new_name: pod_memory_working_set
            action: insert
            match_type: regexp
            match_labels: {"image": "^$", "container": "^$", "pod": "(.|\\s)*\\S(.|\\s)*"}
          - include: container_spec_cpu_shares
            new_name: node_cpu_limit
            action: insert
            match_type: strict
            match_labels: {"id": "/"}
          - include: container_spec_memory_limit_bytes
            new_name: node_memory_limit
            action: insert
            match_type: strict
            match_labels: {"id": "/"}
      resourcedetection:
        detectors: [eks]
      batch:
    exporters:
      awsemf:
        log_group_name: 'cadvisor-far-may1101'
        log_stream_name: 'cadvisor-far-may1101'
        namespace: 'cadvisor-far-may1101'
        dimension_rollup_option: 1
        region: us-east-2
        resource_to_telemetry_conversion:
          enabled: true
      logging:
        loglevel: debug

    extensions:
      health_check:
      pprof:
        endpoint: :1888
      zpages:
        endpoint: :55679

    service:
      extensions: [pprof, zpages, health_check]
      pipelines:
        metrics:
          receivers: [prometheus]
          processors: [metricstransform, filter]
          exporters: [logging, awsemf]
---
# create adot-col service account and role binding
apiVersion: v1
kind: ServiceAccount
metadata:
  name: amp-iamproxy-ingest-service-account
  namespace: adot-col3
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::803860917211:role/amp-iamproxy-ingest-role

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: adotcol-admin-role
rules:
  - apiGroups: [""]
    resources:
    - nodes
    - nodes/proxy
    - nodes/metrics
    - services
    - endpoints
    - pods
    - pods/proxy
    verbs: ["get", "list", "watch"]
  - apiGroups:
    - extensions
    resources:
    - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
    verbs: ["get", "list", "watch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: adotcol-admin-role-binding
subjects:
  - kind: ServiceAccount
    name: amp-iamproxy-ingest-service-account
    namespace: adot-col3
roleRef:
  kind: ClusterRole
  name: adotcol-admin-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: Service
metadata:
  name: adot-collector
  namespace: adot-col3
  labels:
    app: aws-adot
    component: adot-collector
spec:
  ports:
  - name: metrics # Default endpoint for querying metrics.
    port: 8888
  selector:
    component: adot-collector
  type: NodePort
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: adot-collector
  namespace: adot-col3
  labels:
    app: aws-adot
    component: adot-collector
spec:
  selector:
    matchLabels:
      app: aws-adot
      component: adot-collector
  #minReadySeconds: 5
  serviceName: adot-collector
  template:
    metadata:
      labels:
        app: aws-adot
        component: adot-collector
    spec:
      serviceAccountName: amp-iamproxy-ingest-service-account
      securityContext:
        fsGroup: 65534
      containers:
      - image: nginx:latest
        name: nginx-far-100
        resources:
          limits:
            cpu: 0.5
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 200Mi
      - command:
          - "/awscollector"
          - "--config=/conf/adot-collector-config.yaml"
          - "--log-level=DEBUG"
        # image: otel/opentelemetry-collector-contrib:latest
        # image: 868155213681.dkr.ecr.us-east-1.amazonaws.com/otel-ci-integ-test
        image: rhossai2/adot:v0.0.4
        name: contrib-collector-fargate
        env:
          - name: AWS_REGION
            value: "us-east-2"
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: HOST_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: K8S_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 400Mi
        ports:
        - containerPort: 8888  # Default endpoint for querying metrics.
        volumeMounts:
        - name: adot-collector-config-vol
          mountPath: /conf
        livenessProbe:
          httpGet:
            path: /
            port: 13133 # Health Check extension default port.
        readinessProbe:
          httpGet:
            path: /
            port: 13133 # Health Check extension default port.
      volumes:
        - configMap:
            name: adot-collector-conf
            items:
              - key: adot-collector-config
                path: adot-collector-config.yaml
          name: adot-collector-config-vol
---